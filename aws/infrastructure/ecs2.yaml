Description: >
    This template deploys an EC2 cluster to the provided VPC and subnets 
    using an Auto Scaling Group for a Rancher 1 HA Cluster

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    InstanceType:
        Description: EC2 instance type
        Type: String
        Default: t2.medium
        AllowedValues: [t2.micro, t2.small, t2.medium, t2.large, m3.medium, m3.large,
        m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
        c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, c3.large, c3.xlarge,
        c3.2xlarge, c3.4xlarge, c3.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge,
        r3.8xlarge, i2.xlarge, i2.2xlarge, i2.4xlarge, i2.8xlarge]
        ConstraintDescription: Please choose a valid instance type.

    ClusterSize:
        Description: How many hosts do you want to initially deploy?
        Type: Number
        Default: 2

    VPC:
        Description: Choose which VPC this cluster should be deployed to
        Type: AWS::EC2::VPC::Id

    KeyName:
        Default: ''
        Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
        Type: 'AWS::EC2::KeyPair::KeyName'

    Subnets:
        Description: Choose which subnets this cluster should be deployed to
        Type: List<AWS::EC2::Subnet::Id>

    LoadBalancerSecurityGroup:
        Description: Select the Load Balancer Security Group to use for the cluster hosts
        Type: AWS::EC2::SecurityGroup::Id

    MinClusterSize:
        Description: Minimum hosts to deploy
        Type: Number
        Default: 1

    MaxClusterSize:
        Description: Maximum hosts to deploy
        Type: Number
        Default: 4

    SSHFrom:
        Description: Lockdown SSH access to the bastion host (default can be accessed from anywhere)
        Type: String
        MinLength: '9'
        MaxLength: '18'
        Default: 0.0.0.0/0
        AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
        ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.

    EnvType: 
        Description: Environment type.
        Default: standard
        Type: String
        AllowedValues: 
        - standard
        - rancherhost
        - rancherhostEFS

    EFS:
        Description: Choose which EFS this ECS cluster should use for filestorage
        Type: String
        Default: ""

    MountPoint:
        Description: The mount point for the EFS volume
        Type: String
        MinLength: '1'
        Default: "/efs"

    RancherServer:
        Description: URL of Rancher server
        Type: String
        Default: ""

    HostVolumeSize:
        Description: Size in GB of additional non-root volume
        Type: String
        Default: '128'
        AllowedValues:
        - '8'
        - '16'
        - '32'
        - '64'
        - '128'
        - '256'
        - '512'
        - '1024'
        - '2048'
        - '4096'

    BlockVolumeSize:
        Description: Size in GB of additional non-root volume
        Type: String
        Default: '256'
        AllowedValues:
        - '8'
        - '16'
        - '32'
        - '64'
        - '128'
        - '256'
        - '512'
        - '1024'
        - '2048'
        - '4096'

Conditions: 
    UseEFS: !Equals [ !Ref EFS, "" ]
    UseRancherServer: !Equals [ !Ref RancherServer, "" ]

Mappings:
    #We use default AWS Amazon AMI and install docker.
    #Rancher OS Amis: https://github.com/rancher/os/blob/master/README.md
    #Amazon AMI: https://aws.amazon.com/amazon-linux-ami/

    AWSRegionToAMI:
        us-east-1:
            AMI: ami-428aa838
        # us-east-2:
        #     AMI: ami-f63b1193
        # us-west-1:
        #     AMI: ami-c4b3bca4
        # us-west-2:
        #     AMI: ami-6e1a9e16
        # eu-west-1:
        #     AMI: ami-a7f2acc1
        # eu-west-2:
        #     AMI: ami-3fb6bc5b
        # eu-central-1:
        #     AMI: ami-ec2be583
        # ap-northeast-1:
        #     AMI: ami-c393d6a4
        # ap-southeast-1:
        #     AMI: ami-a88530cb
        # ap-southeast-2:
        #     AMI: ami-8af8ffe9
        # ca-central-1:
        #     AMI: ami-ead5688e

Resources:

    EC2AutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties: 
            VPCZoneIdentifier: !Ref Subnets
            LaunchConfigurationName: !Ref EC2LaunchConfiguration
            MinSize: !Ref MinClusterSize
            MaxSize: !Ref MaxClusterSize
            DesiredCapacity: !Ref ClusterSize
            Tags:
                - Key: Name
                  Value: !Join 
                    - '-'
                    - - !Ref 'EnvironmentName'
                      - 'EC2-Instance'
                  PropagateAtLaunch: true
        CreationPolicy:
            ResourceSignal: 
                Timeout: PT15M
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MinInstancesInService: 1
                MaxBatchSize: 1
                PauseTime: PT15M
                SuspendProcesses:
                  - HealthCheck
                  - ReplaceUnhealthy
                  - AZRebalance
                  - AlarmNotification
                  - ScheduledActions
                WaitOnResourceSignals: true

    # This security group defines who/where is allowed to access the hosts directly.
    # By default we're just allowing access from the load balancer.  If you want to SSH 
    # into the hosts, or expose non-load balanced services you can open their ports here.
    EC2HostSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            VpcId: !Ref VPC
            GroupDescription: Access to the hosts and the tasks/containers that run on them
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 0
                  ToPort: 65535
                  CidrIp: "0.0.0.0/0"
                  #SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup 
                - IpProtocol: tcp
                  FromPort: 2379
                  ToPort: 2380
                  CidrIp: "0.0.0.0/0"
                - IpProtocol: tcp
                  FromPort: 9001
                  ToPort: 9005
                  CidrIp: "0.0.0.0/0"
                  CidrIp: "0.0.0.0/0"
                - IpProtocol: udp
                  FromPort: 500
                  ToPort: 500
                  CidrIp: "0.0.0.0/0"
                - IpProtocol: udp
                  FromPort: 4500
                  ToPort: 4500
                  CidrIp: "0.0.0.0/0"
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: !Ref SSHFrom
            Tags: 
                - Key: Name
                  Value: !Sub ${EnvironmentName}-Hosts
        
    EC2LaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            ImageId:  !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
            InstanceType: !Ref InstanceType
            SecurityGroups: 
                - !Ref EC2HostSecurityGroup
            IamInstanceProfile: !Ref EC2InstanceProfile
            KeyName: !Ref KeyName
            AssociatePublicIpAddress: true
            BlockDeviceMappings:
            - DeviceName: /dev/xvda
              Ebs:
                VolumeSize: !Ref HostVolumeSize
                DeleteOnTermination: 'true'
            # - DeviceName: /dev/xvdb
            #   Ebs:
            #     VolumeSize: !Ref BlockVolumeSize
            #     DeleteOnTermination: 'true'
            UserData: 
                "Fn::Base64": !Sub |
                    #!/bin/bash
                    yum install -y aws-cfn-bootstrap
                    yum update -y
                    mount --make-shared /
                    /opt/aws/bin/cfn-init -v -c ${EnvType} --region ${AWS::Region} --stack ${AWS::StackName} --resource EC2LaunchConfiguration
                    /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource EC2AutoScalingGroup

        Metadata:
            AWS::CloudFormation::Init:
                configSets:
                    standard:
                    - "standard"
                    rancherhost:
                    - "standard"                  
                    - "rancherhost"   
                    rancherhostEFS:
                    - "efs"  
                    - "standard"
                    - "rancherhost"  
                standard:
                    files:
                        "/etc/cfn/cfn-hup.conf":
                            mode: 000400
                            owner: root
                            group: root
                            content: !Sub |
                                [main]
                                stack=${AWS::StackId}
                                region=${AWS::Region}
                        
                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                            content: !Sub |
                                [cfn-auto-reloader-hook]
                                triggers=post.update
                                path=Resources.EC2LaunchConfiguration.Metadata.AWS::CloudFormation::Init
                                action=/opt/aws/bin/cfn-init -v -c ${EnvType} --region ${AWS::Region} --stack ${AWS::StackName} --resource EC2LaunchConfiguration
                    services: 
                        sysvinit:
                            cfn-hup: 
                                enabled: true
                                ensureRunning: true
                                files: 
                                    - /etc/cfn/cfn-hup.conf
                                    - /etc/cfn/hooks.d/cfn-auto-reloader.conf
                    commands:
                        1-install-docker:
                            command: !Sub |
                                yum install -y yum-utils device-mapper-persistent-data lvm2
                                yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
                                yum install -y http://mirror.centos.org/centos/7/extras/x86_64/Packages/container-selinux-2.42-1.gitad8f0f7.el7.noarch.rpm
                                yum install -y http://mirror.centos.org/centos/7/os/x86_64/Packages/libtool-ltdl-2.4.2-22.el7_3.x86_64.rpm
                                yum install -y http://mirror.centos.org/centos/7/extras/x86_64/Packages/pigz-2.3.3-1.el7.centos.x86_64.rpm
                                yum install -y docker-ce
                                echo 'DOCKER_STORAGE_OPTIONS="--storage-driver overlay2"' > /etc/sysconfig/docker-storage
                                service docker start
                efs:
                    packages:
                        yum:
                            nfs-utils: []
                    commands:
                        1-init-efs:
                            command: !Sub |
                                mkdir -p ${MountPoint}
                                mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ${EFS}.efs.${AWS::Region}.amazonaws.com:/ ${MountPoint}
                                chown ec2-user:ec2-user ${MountPoint}
                # etcd:
                #     commands:
                #         install_etcd:
                #             command: !Sub |
                #                 docker run -itd --name=etcd --restart=always --expose=2379 -v /etc/sysconfig/:/etc/sysconfig/ monsantoco/etcd-aws-cluster
                # portworx:
                #     commands:
                #         1-install-portworx:
                #             command: !Sub |
                #                 docker run --entrypoint /runc-entry-point.sh --rm -i --privileged=true -v /opt/pwx:/opt/pwx -v /etc/pwx:/etc/pwx portworx/px-enterprise:1.3.0-rc5
                #                 /opt/pwx/bin/px-runc install -c ${AWS::StackName} -k etcd://127.0.0.1:2379 -s "type=io1,size=100,iops=1000"
                #                 systemctl daemon-reload
                #                 systemctl enable portworx
                #                 systemctl start portworx
                rancherhost:
                    commands:
                        register_cattle:
                            command: !Sub |
                                docker run --rm --privileged -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/rancher:/var/lib/rancher rancher/agent:v1.2.9 ${RancherServer}

    EC2Role:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${EnvironmentName}-EC2Role-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": { 
                            "Service": "ec2.amazonaws.com" 
                        }
                    }]
                }
            Policies: 
                - PolicyName: ec2-service
                  PolicyDocument: |
                    {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "autoscaling:Describe*",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:BatchGetImage",
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:GetAuthorizationToken",
                                "ec2:Describe*",
                                "ec2:AttachVolume",
                                "ec2:DetachVolume",
                                "ec2:CreateTags",
                                "ec2:CreateVolume",
                                "ec2:DeleteTags",
                                "ec2:DeleteVolume",
                                "ec2:DescribeTags",
                                "ec2:DescribeVolumeAttribute",
                                "ec2:DescribeVolumesModifications",
                                "ec2:DescribeVolumeStatus",
                                "ec2:DescribeVolumes",
                                "ec2:DescribeInstances"
                            ],
                            "Resource": "*"
                        }]
                    }

    EC2InstanceProfile: 
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles: 
                - !Ref EC2Role

Outputs:

    EC2HostSecurityGroup:
        Description: A reference to the EC2HostSecurityGroup
        Value: !Ref EC2HostSecurityGroup
