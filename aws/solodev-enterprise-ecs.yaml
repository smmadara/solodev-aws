---
AWSTemplateFormatVersion: '2010-09-09'

Description: >

    This template launches a Solodev Enterprise for Containers (ECS) on AWS with external / encrypted database and filesystem.

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Network Configuration"
        Parameters: 
          - VPCID
          - Subnets
          - FQDN
          - CertificateArn
      - 
        Label: 
          default: "Server Configuration"
        Parameters: 
          - InstanceType
          - KeyName
      - 
        Label: 
          default: "Container Location (Default DockerHub)"
        Parameters: 
          - SolodevContainer
          - ApacheContainer
      - 
        Label: 
          default: "Solodev Configuration"
        Parameters: 
          - AdminUsername
          - AdminPassword
          - DatabaseName
          - DatabaseUsername
          - DatabasePassword
      - 
        Label: 
          default: "OPTIONAL: Docker Credentials (Required if not purchased through AWS)"
        Parameters: 
          - DockerUsername
          - DockerPassword
          - DockerEmail
      - 
        Label: 
          default: "OPTIONAL: Custom AMI (COMING SOON!)"
        Parameters: 
          - AMI
    ParameterLabels: 
        FQDN:
            default: "Optional: CMS CNAME"
        CertificateArn:
            default: "Optional: CertificateArn"

Mappings:
  ECS:
    us-east-1:
      AMI: "ami-0b9a214f40c38d5eb"
    us-west-1:
      AMI: ""
    us-west-2:
      AMI: ""
    eu-west-1:
      AMI: ""
    sa-east-1:
      AMI: ""
    ap-southeast-1:
      AMI: ""
    ap-southeast-2:
      AMI: ""
    ap-northeast-1:
      AMI: ""

Parameters:

    VPCID: 
        Type: AWS::EC2::VPC::Id
        Description: Choose which VPC the Application should be deployed to

    Subnets:
        Description: Choose at least (2) Public subnets for this application in the same VPC selected above
        Type: List<AWS::EC2::Subnet::Id>

    FQDN:
        Type: String
        Description: URL for app. Stack name + FQDN = CMS Admin URL
        Default: ''

    CertificateArn:
        Type: String
        Description: SSL cert for HTTPS listener that matches the FQDN
        Default: ''

    KeyName:
        Default: ''
        Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
        Type: 'AWS::EC2::KeyPair::KeyName'

    InstanceType:
        Description: EC2 instance type
        Type: String
        Default: m3.medium
        AllowedValues: [t2.micro, t2.small, t2.medium, t2.large, m3.medium, m3.large,
        m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
        c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, c3.large, c3.xlarge,
        c3.2xlarge, c3.4xlarge, c3.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge,
        r3.8xlarge, i2.xlarge, i2.2xlarge, i2.4xlarge, i2.8xlarge]
        ConstraintDescription: Please choose a valid instance type.

    SolodevContainer:
        Description: Solodev container image
        Default: 'solodev/cms:latest'
        Type: String

    ApacheContainer:
        Description: Apache container image
        Default: 'solodev/cms-apache:latest'
        Type: String

    MongoContainer:
        Description: Mongo container image
        Default: 'solodev/cms-mongo:latest'
        Type: String

    AMI:
        Description: Build AMI - Please leave this blank unless told otherwise
        Default: ''
        Type: String

    AdminUsername:
        Description: CMS Admin User
        Type: String
        Default: 'admin'

    AdminPassword:
        NoEcho: true
        Description: The solodev admin account password
        Type: String
        MinLength: 1
        MaxLength: 41

    DatabaseName:
        Type: String
        Description: The database name
        Default: "solodev"

    DatabasePassword:
        NoEcho: true
        Description: The database root account password
        Type: String
        MinLength: 1
        MaxLength: 41

    DatabaseUsername:
        Description: Database root user
        Type: String
        Default: 'root'

    DockerUsername:
        Description: Docker username
        Type: String

    DockerPassword:
        NoEcho: true
        Description: Docker password
        Type: String

    DockerEmail:
        Description: Docker email address
        Type: String

Conditions:
    UseDefaultAMI: !Equals [ !Ref AMI, "" ]

Resources:

    ALB:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/solodev-aws-ha/aws/infrastructure/alb.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                VPC: !Ref VPCID
                Subnets: !Join [",", [!Select [0, !Ref Subnets], !Select [1, !Ref Subnets]]]

    EFS:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/solodev-aws-ha/aws/infrastructure/efs.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                VPC: !Ref VPCID
                Subnets: !Join [",", [!Select [0, !Ref Subnets], !Select [1, !Ref Subnets]]]

    ECS:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/solodev-aws-ha/aws/infrastructure/ecs.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                InstanceType: !Ref InstanceType
                AMI: !If [UseDefaultAMI, !FindInMap ["ECS", !Ref "AWS::Region", AMI], !Ref AMI]
                ClusterSize: 2
                VPC: !Ref VPCID
                EFS: !GetAtt EFS.Outputs.EFS
                DockerUsername: !Ref DockerUsername
                DockerPassword: !Ref DockerPassword
                DockerEmail: !Ref DockerEmail
                LoadBalancerSecurityGroup: !GetAtt ALB.Outputs.LoadBalancerSecurityGroup
                Subnets: !Join [",", [!Select [0, !Ref Subnets], !Select [1, !Ref Subnets]]]
                KeyName: !Ref KeyName

    RDS:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/solodev-aws-ha/aws/infrastructure/rds.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                DatabaseName: !Ref DatabaseName
                VPC: !Ref VPCID
                LoadBalancerSecurityGroup: !GetAtt ECS.Outputs.ECSHostSecurityGroup
                Subnets: !Join [",", [!Select [0, !Ref Subnets], !Select [1, !Ref Subnets]]]
                DatabasePassword: !Ref DatabasePassword

    # PROXY:
    #     Type: AWS::CloudFormation::Stack
    #     Properties:
    #         TemplateURL: https://s3.amazonaws.com/solodev-aws-ha/aws/services/nginx-proxy-ecs.yaml
    #         Parameters:
    #             EnvironmentName: !Ref AWS::StackName
    #             VPC: !Ref VPCID
    #             Cluster: !GetAtt ECS.Outputs.Cluster
    #             LoadBalancer: !GetAtt ALB.Outputs.LoadBalancer
    #             LoadBalancerSecurityGroup: !GetAtt ALB.Outputs.LoadBalancerSecurityGroup
    #             DesiredCount: 2
    #             ServiceRole: !GetAtt ALB.Outputs.ServiceRole 
    #             Path: /
    
    MONGO:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/solodev-aws-ha/aws/services/ecs-mongo.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                VPC: !Ref VPCID
                Cluster: !GetAtt ECS.Outputs.Cluster
                LoadBalancer: !GetAtt ALB.Outputs.LoadBalancer
                LoadBalancerSecurityGroup: !GetAtt ALB.Outputs.LoadBalancerSecurityGroup
                Subnets: !Join [",", [!Select [0, !Ref Subnets], !Select [1, !Ref Subnets]]]
                DatabaseUsername: !Ref DatabaseUsername
                DatabasePassword: !Ref DatabasePassword
                ServiceRole: !GetAtt ALB.Outputs.ServiceRole
                MongoContainer: !Ref MongoContainer
                Path: '/mongo'

    SOLODEV:
        Type: AWS::CloudFormation::Stack
        DependsOn: RDS
        Properties:
            TemplateURL: https://s3.amazonaws.com/solodev-aws-ha/aws/services/ecs-solodev.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                VPC: !Ref VPCID
                Cluster: !GetAtt ECS.Outputs.Cluster
                LoadBalancer: !GetAtt ALB.Outputs.LoadBalancer
                LoadBalancerSecurityGroup: !GetAtt ALB.Outputs.LoadBalancerSecurityGroup
                Subnets: !Join [",", [!Select [0, !Ref Subnets], !Select [1, !Ref Subnets]]]
                AdminUsername: !Ref AdminUsername
                AdminPassword: !Ref AdminPassword
                DatabaseHost: !GetAtt RDS.Outputs.DatabaseHost
                DatabaseName: !Ref DatabaseName
                MongoHost: !Join [ "", [ !GetAtt ALB.Outputs.LoadBalancerUrl, ":27017" ]]
                DatabaseUsername: !Ref DatabaseUsername
                DatabasePassword: !Ref DatabasePassword
                FQDN: !Ref FQDN
                CertificateArn: !Ref CertificateArn
                SolodevContainer: !Ref SolodevContainer
                ApacheContainer: !Ref ApacheContainer
                DesiredCount: 2
                ServiceRole: !GetAtt ALB.Outputs.ServiceRole 
                Path: / 

Outputs:

    URL: 
        Description: The URL endpoint for the website service
        Value: !Join ["", [ "http://", !GetAtt ALB.Outputs.LoadBalancerUrl, "/" ]]