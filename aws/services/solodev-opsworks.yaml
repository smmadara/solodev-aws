Description: >
    This template deploys Solodev to the provided VPC and subnets using an Auto Scaling Group.  
    This template creates a Lambda function for the management of the CMS (Install, Update, Backup, Restore)

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    InstanceType:
        Description: Web Server EC2 instance type
        Type: String
        Default: m3.medium
        AllowedValues: [t2.small, t2.medium, t2.large, m3.medium, m3.large,
        m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
        c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, c3.large, c3.xlarge,
        c3.2xlarge, c3.4xlarge, c3.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge,
        r3.8xlarge, i2.xlarge, i2.2xlarge, i2.4xlarge, i2.8xlarge]
        ConstraintDescription: Please choose a valid instance type.

    ConntrolInstanceType:
        Description: Control Server EC2 instance type
        Type: String
        Default: t2.small
        AllowedValues: [t2.small, t2.medium, t2.large, m3.medium, m3.large,
        m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
        c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, c3.large, c3.xlarge,
        c3.2xlarge, c3.4xlarge, c3.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge,
        r3.8xlarge, i2.xlarge, i2.2xlarge, i2.4xlarge, i2.8xlarge]
        ConstraintDescription: Please choose a valid instance type.

    ClusterSize:
        Description: How many hosts do you want to initially deploy?
        Type: Number
        Default: 3

    VPC:
        Description: Choose which VPC this cluster should be deployed to
        Type: AWS::EC2::VPC::Id

    KeyName:
        Default: ''
        Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
        Type: 'AWS::EC2::KeyPair::KeyName'

    AMI:
        Description: Build AMI - This should be passed in
        Type: String

    Subnets:
        Description: Choose which subnets this cluster should be deployed to
        Type: List<AWS::EC2::Subnet::Id>

    FQDN:
        Type: String
        Description: Fully qualified URL for using app.  DNS of FQDN must be pointed to CNAME of ALB.

    CertificateArn:
        Type: String
        Description: SSL cert for AWS ALB HTTPS listener

    LoadBalancer:
        Description: The load balancer for the cluster hosts
        Type: String

    LoadBalancerSecurityGroup:
        Description: Select the Load Balancer Security Group to use for the cluster hosts
        Type: AWS::EC2::SecurityGroup::Id

    MinClusterSize:
        Description: Minimum hosts to deploy
        Type: Number
        Default: 2

    MaxClusterSize:
        Description: Maximum hosts to deploy
        Type: Number
        Default: 5

    SSHFrom:
        Description: Lockdown SSH access to the bastion host (default can be accessed from anywhere)
        Type: String
        MinLength: '9'
        MaxLength: '18'
        Default: 0.0.0.0/0
        AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
        ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.

    HostVolumeSize:
        Description: Size in GB of additional non-root volume
        Type: String
        Default: '128'
        AllowedValues:
        - '8'
        - '16'
        - '32'
        - '64'
        - '128'
        - '256'
        - '512'
        - '1024'
        - '2048'
        - '4096'

    BlockVolumeSize:
        Description: Size in GB of additional non-root volume
        Type: String
        Default: '256'
        AllowedValues:
        - '8'
        - '16'
        - '32'
        - '64'
        - '128'
        - '256'
        - '512'
        - '1024'
        - '2048'
        - '4096'

    EFS:
        Description: Choose which EFS this ECS cluster should use for filestorage
        Type: String
        Default: ""

    DatabaseHost:
      Type: String
      Description: The database host

    DatabaseName:
      Type: String
      Description: The database name

    DatabaseUsername:
      Type: String
      Description: The database user name

    DatabasePassword:
      Type: String
      Description: The database user password

    DeploymentType:
        Type: String
        Default: SolodevProduction
        AllowedValues:
        - SolodevFeature
        - SolodevStaging
        - SolodevProduction
        Description: Pick deployment type.

    RestoreBucketName:
        Default: ''
        Description: Name of bucket containing files for restore
        Type: String

    AdminUser:
        Description: CMS Admin User
        Type: String

    AdminPassword:
        Description: CMS Admin Password
        Type: String

Conditions:
    UseSSL: !Equals [ !Ref CertificateArn, "" ]

Resources:

    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties: 
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 14  

    SolodevBucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: !Join ['-', [!Ref 'EnvironmentName', 'solodev']]
            AccessControl: 'BucketOwnerFullControl'
            Tags:
                -
                  Key: 'Name'
                  Value: !Join ['-', [!Ref 'EnvironmentName', 'S3']]
        DeletionPolicy: Delete

    WebServerSecurityGroup:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupDescription: Allow inbound requests from the ELB to the OpsWorks instances
            VpcId: !Ref VPC
            SecurityGroupIngress:
                - 
                    IpProtocol: tcp
                    FromPort: '80'
                    ToPort: '80'
                    SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
                - 
                    IpProtocol: tcp
                    FromPort: '443'
                    ToPort: '443'
                    SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
            Tags:
                - 
                    Key: Name
                    Value: !Join ['-', [!Ref 'EnvironmentName', 'WebServerSecurityGroup']]

    ControlServerSecurityGroup:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupDescription: Allow inbound requests from the ELB to the OpsWorks instances
            VpcId: !Ref VPC
            SecurityGroupIngress:
                - 
                    IpProtocol: tcp
                    FromPort: '27017'
                    ToPort: '27017'
                    SourceSecurityGroupId: !Ref WebServerSecurityGroup

    BackupUser:
        Type: 'AWS::IAM::User'
        Properties:
            Path: /
            Policies:
                - 
                    PolicyName: root
                    PolicyDocument:
                        Statement:
                            - 
                                Effect: Allow
                                Action:
                                    - 'cloudformation:DescribeStackResource'
                                Resource: '*'
                - 
                    PolicyName: backupdef
                    PolicyDocument:
                        Statement: 
                            - 
                                Action: 
                                    - 's3:*'
                                Effect: "Allow"
                                Resource: 
                                    Fn::Join: 
                                    - ""
                                    - 
                                        - "arn:aws:s3:::"
                                        - !Join ['-', [!Ref 'EnvironmentName', 'solodev']]
                                        - "/*"

    BackupUserKeys:
        Type: 'AWS::IAM::AccessKey'
        Properties:
            UserName: !Ref BackupUser

    OpsWorksServiceRole:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                    - 
                        Effect: Allow
                        Principal:
                            Service: opsworks.amazonaws.com
                        Action:
                            - 'sts:AssumeRole'
            Path: /
            Policies:
                - 
                    PolicyName: opsworks-service
                    PolicyDocument:
                        Statement:
                            - 
                                Effect: Allow
                                Action:
                                    - 'rds:*'
                                    - 'ec2:*'
                                    - 'iam:PassRole'
                                    - 'cloudwatch:GetMetricStatistics'
                                    - 'elasticloadbalancing:*'
                                Resource: '*'

    SolodevInstanceRole:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement: 
                    - 
                        Effect: "Allow"
                        Principal: 
                            Service: 
                                - "ec2.amazonaws.com"
                        Action: 
                        - "sts:AssumeRole"
            Path: /
            Policies:
                - 
                    PolicyName: PowerUserPolicy
                    PolicyDocument:
                        Statement:
                        - 
                            Sid: PowerUserStmt
                            Effect: Allow
                            NotAction: 'iam:*'
                            Resource: '*'

    SolodevInstanceProfile:
        Type: 'AWS::IAM::InstanceProfile'
        Properties:
            Path: /
            Roles:
                - !Ref SolodevInstanceRole

    SolodevApp:
        Type: 'AWS::OpsWorks::App'
        Properties:
            StackId: !Ref SolodevStack
            Name: Solodev
            Type: other
            Attributes:
                DocumentRoot: ' '

    SolodevStack:
        Type: 'AWS::OpsWorks::Stack'
        Properties:
            Name: !Ref 'EnvironmentName'
            ConfigurationManager:
                Name: Chef
                Version: '12'
            ServiceRoleArn: !GetAtt 
                - OpsWorksServiceRole
                - Arn
            DefaultInstanceProfileArn: !GetAtt 
                - SolodevInstanceProfile
                - Arn
            VpcId: !Ref VPC
            DefaultSubnetId: !Select 
                - '0'
                - !Ref Subnets
            UseCustomCookbooks: 'true'
            CustomCookbooksSource:
                Revision: master
                Type: s3
                Url: 'https://s3.amazonaws.com/solodev-aws-ha/cookbooks.tar.gz'
            CustomJson:
                install:
                    StackName: !Ref 'EnvironmentName'
                    HostedZoneName: !Ref FQDN
                    Region: !Ref 'AWS::Region'
                    VolumeName: solodev
                    ReplicaNum: 2
                    document_root: /var/www
                    control_root: /var/www/Solodev/clients/solodev
                    mongo_nodes: !Ref DeploymentType
                    software_name: Solodev
                    client_name: solodev
                    apache_conf_dir: /etc/httpd/conf.d
                    AWSAccessKeyId: !Ref BackupUserKeys
                    AWSSecretKey: !GetAtt 
                        - BackupUserKeys
                        - SecretAccessKey
                    InstallBucketName: solodev-install
                    RestoreBucketName: !Ref RestoreBucketName
                    BackupBucketName: !Join ['-', [!Ref 'EnvironmentName', 'solodev']]
                    CMSDir: solodevX
                    DBName: !Ref DatabaseName
                    DBHOST: !Ref DatabaseHost
                    DBUSER: !Ref DatabaseUsername
                    DBPASSWORD: !Ref DatabasePassword
                    ADMINUSER: !Ref AdminUser
                    ADMINPASSWORD: !Ref AdminPassword
                    EFSHOST: !Ref EFS
                    THEME: ''
                    WEBSITE: ''

    ControlServerLayer:
        Type: 'AWS::OpsWorks::Layer'
        Properties:
            StackId: !Ref SolodevStack
            Name: SolodevControl
            Type: custom
            Shortname: solodev-control
            EnableAutoHealing: 'true'
            AutoAssignElasticIps: 'false'
            AutoAssignPublicIps: 'true'
            CustomSecurityGroupIds:
                - !Ref ControlServerSecurityGroup
                - !Ref WebServerSecurityGroup
                - !Ref LoadBalancerSecurityGroup
            CustomRecipes:
                Setup:
                    - 'main::mountEFS'
                    - 'storage::deploy_mongo'
                    - 'storage::deploy_mongo_cluster'
                    - 'main::client_settings'
                    - 'main::deploy_duplicity'
                Configure:
                    - 'main::deploy_solodev'
                    - 'main::update_software'
                    - 'storage::heal_mongo'
                Deploy: []
                Undeploy: []
                Shutdown: []

    WebServerLayer:
        Type: 'AWS::OpsWorks::Layer'
        DependsOn:
            - SolodevApp
        Properties:
            StackId: !Ref SolodevStack
            Name: !Ref DeploymentType
            Type: custom
            Shortname: solodev-web
            EnableAutoHealing: 'true'
            AutoAssignElasticIps: 'false'
            AutoAssignPublicIps: 'true'
            LoadBasedAutoScaling:
                DownScaling:
                    CpuThreshold: 50
                    IgnoreMetricsTime: 10
                    InstanceCount: 1
                    LoadThreshold: 50
                    MemoryThreshold: 50
                    ThresholdsWaitTime: 1
                Enable: 'true'
                UpScaling:
                    CpuThreshold: 90
                    IgnoreMetricsTime: 10
                    InstanceCount: 1
                    LoadThreshold: 90
                    MemoryThreshold: 90
                    ThresholdsWaitTime: 1
            CustomSecurityGroupIds:
                - !Ref ControlServerSecurityGroup
                - !Ref WebServerSecurityGroup
                - !Ref LoadBalancerSecurityGroup
            CustomRecipes:
                Setup:
                    - 'main::mountEFS'
                    - 'main::deploy_base'
                    - 'storage::deploy_mongo'
                    - 'storage::deploy_mongo_brick'
                    - 'main::deploy_scripts'
                Configure: []
                Deploy:
                    - 'main::deploy_solodev'
                Shutdown: []
                Undeploy: []
            VolumeConfigurations:
                - 
                    MountPoint: /mongo
                    Size: !Ref BlockVolumeSize
                    NumberOfDisks: 1

    ELBAttachment:
        Type: 'AWS::OpsWorks::ElasticLoadBalancerAttachment'
        Properties:
            ElasticLoadBalancerName: !Ref LoadBalancer
            LayerId: !Ref WebServerLayer

    SolodevInstance1:
        Type: 'AWS::OpsWorks::Instance'
        Properties:
            AmiId: !Ref AMI
            Os: Custom
            StackId: !Ref SolodevStack
            LayerIds:
                - !Ref WebServerLayer
            SubnetId: !Select 
                - '0'
                - !Ref Subnets
            InstanceType: !Ref InstanceType
            RootDeviceType: ebs
            SshKeyName: !Ref KeyName

    SolodevInstance2:
        Type: 'AWS::OpsWorks::Instance'
        Properties:
            AmiId: !Ref AMI
            Os: Custom
            StackId: !Ref SolodevStack
            LayerIds:
                - !Ref WebServerLayer
            SubnetId: !Select 
                - '1'
                - !Ref Subnets
            InstanceType: !Ref InstanceType
            RootDeviceType: ebs
            SshKeyName: !Ref KeyName

    SolodevInstance3:
        Type: 'AWS::OpsWorks::Instance'
        Properties:
            AmiId: !Ref AMI
            Os: Custom
            StackId: !Ref SolodevStack
            LayerIds:
                - !Ref WebServerLayer
            SubnetId: !Select 
                - '0'
                - !Ref Subnets
            InstanceType: !Ref InstanceType
            RootDeviceType: ebs
            SshKeyName: !Ref KeyName

    ControlInstance:
        Type: 'AWS::OpsWorks::Instance'
        Properties:
            AmiId: !Ref AMI
            Os: Custom
            StackId: !Ref SolodevStack
            LayerIds:
                - !Ref ControlServerLayer
            InstanceType: !Ref ConntrolInstanceType
            RootDeviceType: ebs
            SshKeyName: !Ref KeyName

    IPAddress:
        Type: 'Custom::PublicIpLookUp'
        Properties:
            ServiceToken: !GetAtt 
                - IPLookup
                - Arn
            OWInstanceId: !Ref SolodevInstance1

    IPLookup:
        Type: 'AWS::Lambda::Function'
        Properties:
            Handler: cfn_python_opsworks.lambda_handler
            Role: !GetAtt 
                - LambdaExecutionRole
                - Arn
            Code:
                S3Bucket: solodev-install
                S3Key: opsworks_getip.zip
            Runtime: python2.7
            Timeout: '25'

    LambdaExecutionRole:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - 
                        Effect: Allow
                        Principal:
                            Service:
                                - lambda.amazonaws.com
                        Action:
                            - 'sts:AssumeRole'
            Path: /
            Policies:
                - 
                    PolicyName: LambdaExecutionRole
                    PolicyDocument:
                        Version: 2012-10-17
                        Statement:
                            - 
                                Sid: LambdaExecutionStmt
                                Effect: Allow
                                NotAction: 'iam:*'
                                Resource: '*'

Outputs:

    DedicatedIP:
        Value: !GetAtt 
        - IPAddress
        - PublicIp
        Description: Point DNS A records to this IP and server will redirect to the server CNAME.  If your DNS supports pointing A records to CNAME's please use CNAME instead.