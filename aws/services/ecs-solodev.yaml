Description: >
    ECS Task definition for Solodev CMS

Parameters: 

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    VPC:
        Description: The VPC that the ECS cluster is deployed to
        Type: AWS::EC2::VPC::Id
        
    Cluster:
        Description: Please provide the ECS Cluster ID that this service should run on
        Type: String

    LoadBalancer:
        Description: The VPC that the ECS cluster is deployed to
        Type: String

    LoadBalancerSecurityGroup:
        Description: Select the Load Balancer Security Group to use for the cluster hosts
        Type: AWS::EC2::SecurityGroup::Id

    Subnets:
        Description: Choose which subnets this cluster should be deployed to
        Type: List<AWS::EC2::Subnet::Id>

    DesiredCount: 
        Description: How many instances of this task should we run across our cluster?
        Type: Number
        Default: 2

    MaxCount:
        Description: Maximum number of instances of this task we can run across our cluster
        Type: Number
        Default: 3

    Path: 
        Description: The path to register with the Application Load Balancer
        Type: String
        Default: /

    ServiceRole:
        Description: The Application Load Balancer Service Role
        Type: String

    DatabaseHost:
      Type: String
      Description: The database host

    MongoHost:
      Type: String
      Description: The mongo host

    DatabaseName:
      Type: String
      Description: The database name
      Default: "solodev-cms"

    DatabaseUsername:
      Type: String
      Description: The database user name
      Default: "root"

    DatabasePassword:
      Type: String
      Description: The database user password
        
    DatabasePort:
        Default: '3306'
        Description: Database Port
        Type: Number

    AdminUsername:
      Type: String
      Description: The admin user name
      Default: "solodev"

    AdminPassword:
      Type: String
      Description: The admin user password

Resources:

    Service: 
        Type: AWS::ECS::Service
        DependsOn: ListenerRule
        Properties: 
            Cluster: !Ref Cluster
            DesiredCount: !Ref DesiredCount
            TaskDefinition: !Ref TaskDefinition
            DesiredCount: 2
            ServiceName: solodev-cms
            # ServiceRegistries:
            #     - RegistryArn: !GetAtt SolodevServiceDiscovery.Arn
            #       ContainerName: apache2
            #       ContainerPort: '80'
            # NetworkConfiguration:
            #     AwsvpcConfiguration:
            #         Subnets: !Ref Subnets
            #         SecurityGroups:
            #             - !GetAtt ServiceSecurityGroup.GroupId
            LoadBalancers: 
                - ContainerName: "apache2"
                  ContainerPort: 80
                  TargetGroupArn: !Ref TargetGroup

    ServiceSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: "Inbound web traffic"
            SecurityGroupIngress:
                - {ToPort: 80, FromPort: 80, IpProtocol: tcp, SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup} # HTTP
                - {ToPort: 443, FromPort: 443, IpProtocol: tcp, SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup} # HTTPS
            VpcId: !Ref VPC

    TaskExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                - {Action: "sts:AssumeRole", Effect: Allow, Principal: {Service: ecs-tasks.amazonaws.com}}
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: solodev
            ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
            ContainerDefinitions:
                -
                    Name: solodev
                    PortMappings:
                        - 
                            ContainerPort: 9000
                            Protocol: "tcp"
                    Essential: true
                    MountPoints: 
                        - 
                            SourceVolume: "solodev-client"
                            ContainerPath: "/var/www/Solodev/clients/solodev"
                    Essential: true
                    Image: solodev/cms:latest
                    MemoryReservation: 256
                    Environment:
                        - Name: APP_DEBUG
                          Value: false
                        - Name: APP_ENV
                          Value: 'prod'
                        - Name: DB_HOST
                          Value: !Ref DatabaseHost
                        - Name: DB_PORT
                          Value: !Ref DatabasePort
                        - Name: DB_NAME
                          Value: !Ref DatabaseName
                        - Name: DB_USER
                          Value: !Ref DatabaseUsername
                        - Name: DB_PASSWORD
                          Value: !Ref DatabasePassword
                        - Name: MONGO_HOST
                          Value: !Ref MongoHost
                        - Name: SOLODEV_USER
                          Value: !Ref AdminUsername
                        - Name: SOLODEV_PASSWORD
                          Value: !Ref AdminPassword
                    LogConfiguration:
                        LogDriver: awslogs
                        Options:
                            awslogs-group: !Ref AWS::StackName
                            awslogs-region: !Ref AWS::Region
                            awslogs-stream-prefix: solodev-php-fpm
                - 
                    Name: apache2
                    Links:
                        - solodev
                    PortMappings:
                        - 
                            ContainerPort: 80
                            Protocol: "tcp"
                        - 
                            ContainerPort: 443
                            Protocol: "tcp"
                    MountPoints: 
                        - 
                            SourceVolume: "solodev-client"
                            ContainerPath: "/var/www/Solodev/clients/solodev"
                    Essential: true
                    Image: solodev/cms-apache:latest
                    MemoryReservation: 256
                    LogConfiguration:
                        LogDriver: awslogs
                        Options:
                            awslogs-group: !Ref AWS::StackName
                            awslogs-region: !Ref AWS::Region
                            awslogs-stream-prefix: solodev-apache2
            Volumes: 
                - 
                    Host: 
                        SourcePath: !Join ['', ['/efs/', !Ref 'EnvironmentName', '/solodev']]
                    Name: "solodev-client"

    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties: 
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 30  

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId: !Ref VPC
            Port: 80
            Protocol: HTTP
            # Matcher: 
            #     HttpCode: 200-299
            # HealthCheckIntervalSeconds: 10
            # HealthCheckPath: /
            # HealthCheckProtocol: HTTP
            # HealthCheckTimeoutSeconds: 5
            # HealthyThresholdCount: 2
            # # TargetType: ip
            # TargetGroupAttributes:
            #     - Key: deregistration_delay.timeout_seconds
            #       Value: '700'
            #     - Key: stickiness.type
            #       Value: lb_cookie
            #     - Key: stickiness.enabled
            #       Value: 'true'
            #     - Key: stickiness.lb_cookie.duration_seconds
            #       Value: '1860'
            Name: !Join 
                - '-'
                - - !Ref 'EnvironmentName'
                  - solodev

    Listener:
        Type: 'AWS::ElasticLoadBalancingV2::Listener'
        Properties:
            DefaultActions:
                - Type: forward
                  TargetGroupArn: !Ref TargetGroup
            LoadBalancerArn: !Ref LoadBalancer
            Port: '80'
            Protocol: HTTP
    
    ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref Listener
            Priority: 1
            Conditions:
                - Field: path-pattern
                  Values: 
                    - !Ref Path
            Actions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward

    ScalingRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  -
                    Effect: "Allow"
                    Principal:
                        Service:
                            - application-autoscaling.amazonaws.com
                    Action:
                      - "sts:AssumeRole"
            Path: "/"
            Policies:
                -
                    PolicyName: "root"
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                        -
                            Effect: "Allow"
                            Action:
                            - "dynamodb:DescribeTable"
                            - "dynamodb:UpdateTable"
                            - "cloudwatch:PutMetricAlarm"
                            - "cloudwatch:DescribeAlarms"
                            - "cloudwatch:GetMetricStatistics"
                            - "cloudwatch:SetAlarmState"
                            - "cloudwatch:DeleteAlarms"
                            Resource: "*"

    ServiceScalableTarget:
        Type: "AWS::ApplicationAutoScaling::ScalableTarget"
        Properties:
            MaxCapacity: !Ref MaxCount
            MinCapacity: !Ref DesiredCount
            ResourceId: !Join
                - /
                - - service
                  - !Ref Cluster
                  - !GetAtt Service.Name
            RoleARN: !GetAtt ScalingRole.Arn
            ScalableDimension: ecs:service:DesiredCount
            ServiceNamespace: ecs

    ServiceScaleOutPolicy:
        Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
        Properties:
            PolicyName: ServiceScaleOutPolicy
            PolicyType: StepScaling
            ScalingTargetId: !Ref ServiceScalableTarget
            StepScalingPolicyConfiguration:
                AdjustmentType: ChangeInCapacity
                Cooldown: 1800
                MetricAggregationType: Average
                StepAdjustments:
                - MetricIntervalLowerBound: 0
                  ScalingAdjustment: 1

    ServiceScaleInPolicy:
        Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
        Properties:
            PolicyName: ServiceScaleInPolicy
            PolicyType: StepScaling
            ScalingTargetId: !Ref ServiceScalableTarget
            StepScalingPolicyConfiguration:
                AdjustmentType: ChangeInCapacity
                Cooldown: 1800
                MetricAggregationType: Average
                StepAdjustments:
                - MetricIntervalUpperBound: 0
                  ScalingAdjustment: -1

    CPUScaleOutAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmName: CPU utilization greater than 90%
            AlarmDescription: Alarm if cpu utilization greater than 90% of reserved cpu
            Namespace: AWS/ECS
            MetricName: CPUUtilization
            Dimensions:
            - Name: ClusterName
              Value: !Ref Cluster
            - Name: ServiceName
              Value: !GetAtt Service.Name
            Statistic: Maximum
            Period: '60'
            EvaluationPeriods: '3'
            Threshold: '90'
            ComparisonOperator: GreaterThanThreshold
            AlarmActions:
            - !Ref ServiceScaleOutPolicy

    CPUScaleInAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmName: CPU utilization less than 70%
            AlarmDescription: Alarm if cpu utilization greater than 70% of reserved cpu
            Namespace: AWS/ECS
            MetricName: CPUUtilization
            Dimensions:
            - Name: ClusterName
              Value: !Ref Cluster
            - Name: ServiceName
              Value: !GetAtt Service.Name
            Statistic: Maximum
            Period: '60'
            EvaluationPeriods: '10'
            Threshold: '70'
            ComparisonOperator: LessThanThreshold
            AlarmActions:
            - !Ref ServiceScaleInPolicy

    # ServiceDiscoveryNamespace:
    #     Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    #     Properties:
    #         Name: !Join ['.', ['ecs', !Ref 'AWS::StackName', 'solodev']]
    #         Vpc: !Ref VPC

    # SolodevServiceDiscovery:
    #     Type: AWS::ServiceDiscovery::Service
    #     Properties:
    #         Name: solodev-cms
    #         DnsConfig:
    #             DnsRecords: [{Type: SRV, TTL: "10"}]
    #             NamespaceId: !Ref ServiceDiscoveryNamespace
    #         HealthCheckCustomConfig:
    #             FailureThreshold: 1