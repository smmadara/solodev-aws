Description: >
    ECS Task definition for Solodev CMS

Parameters: 

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    VPC:
        Description: The VPC that the ECS cluster is deployed to
        Type: AWS::EC2::VPC::Id
        
    Cluster:
        Description: Please provide the ECS Cluster ID that this service should run on
        Type: String

    LoadBalancer:
        Description: The VPC that the ECS cluster is deployed to
        Type: String

    LoadBalancerSecurityGroup:
        Description: Select the Load Balancer Security Group to use for the cluster hosts
        Type: AWS::EC2::SecurityGroup::Id

    DesiredCount: 
        Description: How many instances of this task should we run across our cluster?
        Type: Number
        Default: 2

    MaxCount:
        Description: Maximum number of instances of this task we can run across our cluster
        Type: Number
        Default: 3

    Path: 
        Description: The path to register with the Application Load Balancer
        Type: String
        Default: /

    ServiceRole:
        Description: The Application Load Balancer Service Role
        Type: String

    DatabaseHost:
      Type: String
      Description: The database host

    DatabaseName:
      Type: String
      Description: The database name
      Default: "solodev-cms"

    DatabaseUsername:
      Type: String
      Description: The database user name
      Default: "root"

    DatabasePassword:
      Type: String
      Description: The database user password
        
    DatabasePort:
        Default: '3306'
        Description: Database Port
        Type: Number

    AdminUsername:
      Type: String
      Description: The admin user name
      Default: "solodev"

    AdminPassword:
      Type: String
      Description: The admin user password

Resources:

    Service: 
        Type: AWS::ECS::Service
        DependsOn: ListenerRule
        Properties: 
            Cluster: !Ref Cluster
            Role: !Ref ServiceRole
            DesiredCount: !Ref DesiredCount
            TaskDefinition: !Ref TaskDefinition
            DesiredCount: 4
            ServiceName: solodev-cms
            ServiceRegistries:
                - RegistryArn: !GetAtt SolodevServiceDiscovery.Arn
            LoadBalancers: 
                - ContainerName: "solodev-cms"
                  ContainerPort: 8080
                  TargetGroupArn: !Ref TargetGroup

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: solodev-cms
            ContainerDefinitions:
                -
                    Name: php-fpm
                    Essential: true
                    MountPoints: 
                        - 
                            SourceVolume: "solodev-client"
                            ContainerPath: "/var/www/Solodev/clients/solodev"
                    Essential: true
                    Image: solodev/cms:latest
                    MemoryReservation: 256
                    Environment:
                        - Name: DB_HOST
                          Value: !Ref DatabaseHost
                        - Name: DB_PORT
                          Value: !Ref DatabasePort
                        - Name: DB_NAME
                          Value: !Ref DatabaseName
                        - Name: DB_USER
                          Value: !Ref DatabaseUsername
                        - Name: DB_PASSWORD
                          Value: !Ref DatabasePassword
                        - Name: MONGO_HOST
                          Value: !Join ['.', ['mongo', 'ecs', !Ref 'AWS::StackName', 'solodev:27017']]
                        - Name: SOLODEV_USER
                          Value: !Ref AdminUsername
                        - Name: SOLODEV_PASSWORD
                          Value: !Ref AdminPassword
                    LogConfiguration:
                        LogDriver: awslogs
                        Options:
                            awslogs-group: !Ref AWS::StackName
                            awslogs-region: !Ref AWS::Region
                            awslogs-stream-prefix: solodev-php-fpm
                - 
                    Name: apache2
                    Links:
                        - php-fpm
                    PortMappings:
                        - 
                            ContainerPort: 80
                            Protocol: "tcp"
                        - 
                            ContainerPort: 443
                            Protocol: "tcp"
                    MountPoints: 
                        - 
                            SourceVolume: "solodev-client"
                            ContainerPath: "/var/www/Solodev/clients/solodev"
                    Essential: true
                    Image: solodev/cms-apache:latest
                    MemoryReservation: 256
                    LogConfiguration:
                        LogDriver: awslogs
                        Options:
                            awslogs-group: !Ref AWS::StackName
                            awslogs-region: !Ref AWS::Region
                            awslogs-stream-prefix: solodev-apache2
            Volumes: 
                - 
                    Host: 
                        SourcePath: !Join ['', ['/efs/', !Ref 'AWS::StackName', '/solodev']]
                    Name: "solodev-client"

    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties: 
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 30  

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId: !Ref VPC
            Port: 80
            Protocol: HTTP
            Matcher: 
                HttpCode: 200-299
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2
            TargetGroupAttributes:
                - Key: deregistration_delay.timeout_seconds
                  Value: '700'
                - Key: stickiness.type
                  Value: lb_cookie
                - Key: stickiness.enabled
                  Value: 'true'
                - Key: stickiness.lb_cookie.duration_seconds
                  Value: '1860'

    Listener:
        Type: 'AWS::ElasticLoadBalancingV2::Listener'
        Properties:
            DefaultActions:
                - Type: forward
                  TargetGroupArn: !Ref TargetGroup
            LoadBalancerArn: !Ref LoadBalancer
            Port: '80'
            Protocol: HTTP
    
    ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref Listener
            Priority: 1
            Conditions:
                - Field: path-pattern
                  Values: 
                    - !Ref Path
            Actions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward

    ServiceScalableTarget:
        Type: "AWS::ApplicationAutoScaling::ScalableTarget"
        Properties:
            MaxCapacity: !Ref MaxCount
            MinCapacity: !Ref DesiredCount
            ResourceId: !Join
                - /
                - - service
                  - !Ref Cluster
                  - !GetAtt Service.Name
            RoleARN: !Ref ServiceRole
            ScalableDimension: ecs:service:DesiredCount
            ServiceNamespace: ecs

    ServiceScaleOutPolicy:
        Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
        Properties:
            PolicyName: ServiceScaleOutPolicy
            PolicyType: StepScaling
            ScalingTargetId: !Ref ServiceScalableTarget
            StepScalingPolicyConfiguration:
                AdjustmentType: ChangeInCapacity
                Cooldown: 1800
                MetricAggregationType: Average
                StepAdjustments:
                - MetricIntervalLowerBound: 0
                  ScalingAdjustment: 1

    ServiceScaleInPolicy:
        Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
        Properties:
            PolicyName: ServiceScaleInPolicy
            PolicyType: StepScaling
            ScalingTargetId: !Ref ServiceScalableTarget
            StepScalingPolicyConfiguration:
                AdjustmentType: ChangeInCapacity
                Cooldown: 1800
                MetricAggregationType: Average
                StepAdjustments:
                - MetricIntervalUpperBound: 0
                  ScalingAdjustment: -1

    CPUScaleOutAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmName: CPU utilization greater than 90%
            AlarmDescription: Alarm if cpu utilization greater than 90% of reserved cpu
            Namespace: AWS/ECS
            MetricName: CPUUtilization
            Dimensions:
            - Name: ClusterName
              Value: !Ref Cluster
            - Name: ServiceName
              Value: !GetAtt Service.Name
            Statistic: Maximum
            Period: '60'
            EvaluationPeriods: '3'
            Threshold: '90'
            ComparisonOperator: GreaterThanThreshold
            AlarmActions:
            - !Ref ServiceScaleOutPolicy

    CPUScaleInAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmName: CPU utilization less than 70%
            AlarmDescription: Alarm if cpu utilization greater than 70% of reserved cpu
            Namespace: AWS/ECS
            MetricName: CPUUtilization
            Dimensions:
            - Name: ClusterName
              Value: !Ref Cluster
            - Name: ServiceName
              Value: !GetAtt Service.Name
            Statistic: Maximum
            Period: '60'
            EvaluationPeriods: '10'
            Threshold: '70'
            ComparisonOperator: LessThanThreshold
            AlarmActions:
            - !Ref ServiceScaleInPolicy

    ServiceDiscoveryNamespace:
        Type: AWS::ServiceDiscovery::PrivateDnsNamespace
        Properties:
            Name: !Join ['.', ['ecs', !Ref 'AWS::StackName', 'solodev']]
            Vpc: !Ref VPC

    SolodevServiceDiscovery:
        Type: AWS::ServiceDiscovery::Service
        Properties:
            Name: solodev-cms
            DnsConfig:
                DnsRecords: [{Type: A, TTL: "10"}]
                NamespaceId: !Ref ServiceDiscoveryNamespace
            HealthCheckCustomConfig:
                FailureThreshold: 1

    MONGO:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/solodev-aws-ha/aws/services/ecs-mongo.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                VPC: !Ref VPC
                Cluster: !Ref Cluster
                LoadBalancer: !Ref LoadBalancer
                DatabaseUsername: !Ref DatabaseUsername
                DatabasePassword: !Ref DatabasePassword
                ServiceRole: !Ref ServiceRole 
                ServiceDiscoveryNamespace: !Ref ServiceDiscoveryNamespace